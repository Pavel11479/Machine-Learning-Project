{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns # for visualisation\n",
    "import numpy as np\n",
    "from sklearn.model_selection import cross_val_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "rep = 'Downloads/sml-ht2021/'\n",
    "y_train = pd.read_csv(rep + 'y_train.csv', index_col = 0, squeeze=True)\n",
    "X_train = pd.read_csv(rep + 'X_train.csv', index_col = 0, header=[0, 1, 2])\n",
    "X_test = pd.read_csv(rep + 'X_test.csv', index_col = 0, header=[0, 1, 2])\n",
    "from sklearn.model_selection import train_test_split\n",
    "inputs_train, inputs_test, targets_train, targets_test = train_test_split(X_train, y_train, test_size = 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs_train_nn = inputs_train.reset_index(drop=True)\n",
    "inputs_test_nn = inputs_test.reset_index(drop=True)\n",
    "targets_train_nn=targets_train.reset_index(drop=True)\n",
    "targets_test_nn=targets_test.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Base classifiers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest (not used)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Random Forest\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "y_pred_RF = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    RF = RandomForestClassifier(n_estimators = 150, max_depth = 50, class_weight = 'balanced')\n",
    "    RF_prob = RF.fit(inputs_train.drop(inputs_train.index[i-840:i]), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train[i-840:i])\n",
    "    y_pred_RF = np.append(y_pred_RF, RF_prob, axis = 0)\n",
    "\n",
    "\n",
    "dfRF_train = pd.DataFrame(y_pred_RF, columns = ['RF_El', 'RF_Exp', 'RF_Flk', 'RF_HH', \n",
    "                                           'RF_Inst', 'RF_Intr', 'RF_Pop', 'RF_Rck'])\n",
    "\n",
    "RF_fitted = RF.fit(inputs_train, targets_train)\n",
    "\n",
    "y_pred_test_RF = RF_fitted.predict_proba(inputs_test)\n",
    "dfRF_test = pd.DataFrame(y_pred_test_RF, columns = ['RF_El', 'RF_Exp', 'RF_Flk', 'RF_HH', \n",
    "                                           'RF_Inst', 'RF_Intr', 'RF_Pop', 'RF_Rck'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Nets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader, random_split\n",
    "from torch import nn, optim\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "import os\n",
    "\n",
    "\n",
    "# PASHA PLEASE CHECK TO MAKE SURE THIS IS THE SAME ORDER OF CLASSES AS YOU ARE USING\n",
    "classes = ['Electronic', 'Experimental', 'Folk', 'Hip-Hop', 'Instrumental','International', 'Pop', 'Rock']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "class AudioDataset(Dataset):\n",
    "    def __init__(self, x, y):\n",
    "        super(AudioDataset, self).__init__()\n",
    "        assert x.shape[0] == y.shape[0] # assuming shape[0] = dataset size\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def __len__(self):\n",
    "        return self.y.shape[0]\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        x_tensor = torch.tensor(self.x.loc[index].values, dtype=torch.float)\n",
    "        y_tensor = torch.tensor(self.y.loc[index], dtype=torch.long)\n",
    "        return (x_tensor, y_tensor)\n",
    "    \n",
    "def nn_accuracy(network, data_loader):\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    with torch.no_grad():\n",
    "        for i,d in enumerate(data_loader):\n",
    "            data, labels = d\n",
    "            outputs = network(data)\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "            #print(i,predicted,labels)\n",
    "\n",
    "    accuracy = 100 * correct / total\n",
    "    return accuracy\n",
    "\n",
    "def nn_train(net, train_dl, val_dl, SAVE_PATH, epoch_num=20, num_batches=100, \n",
    "             lr=0.01, momentum=0.9, verbose=False):\n",
    "    # define the optimization\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.SGD(net.parameters(), lr=lr, momentum=momentum)\n",
    "\n",
    "    # enumerate epochs\n",
    "    max_val_acc = 0\n",
    "    for epoch in range(epoch_num):\n",
    "        # enumerate mini batches\n",
    "        running_loss = 0.0\n",
    "        for i, (inputs, labels) in enumerate(train_dl):\n",
    "            # zero the parameter gradients\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            # forward + backward + optimize\n",
    "            outputs = net(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            # training loss\n",
    "            running_loss += loss.item()\n",
    "            val_acc = nn_accuracy(net, val_dl)\n",
    "            if val_acc > max_val_acc:\n",
    "                    torch.save(net.state_dict(), SAVE_PATH)\n",
    "                    max_val_acc = val_acc\n",
    "            if i % num_batches == (num_batches-1): \n",
    "                tr_acc = nn_accuracy(net, train_dl)\n",
    "                val_acc = nn_accuracy(net, val_dl)\n",
    "                if verbose:\n",
    "                    print('[EPOCH #', epoch+1,']') \n",
    "                    print('       Loss:', round(running_loss / num_batches, 3))\n",
    "                    print('  Train Acc:', round(tr_acc,2), '%')\n",
    "                    print('    Val Acc:', round(val_acc,2),'%')\n",
    "                    print('Max Val Acc:', round(max_val_acc,2) ,'%')\n",
    "                    print(\"------------\")\n",
    "                running_loss = 0.0\n",
    "                \n",
    "\n",
    "    print('Finished Training')\n",
    "    print('Max Validation Acc:', max_val_acc, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Net(nn.Module):\n",
    "    \n",
    "    def __init__(self):\n",
    "        super(Net, self).__init__()\n",
    "        self.fc1 = nn.Linear(len(X_train.columns), 800)\n",
    "        self.fc2 = nn.Linear(800, 100)\n",
    "        self.fc3 = nn.Linear(100, 500)\n",
    "        self.fc4 = nn.Linear(500, 100)\n",
    "        self.fc5 = nn.Linear(100, 100)\n",
    "        self.fc6 = nn.Linear(100, 8)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = torch.celu(self.fc1(x))\n",
    "        x = torch.celu(self.fc2(x),alpha=2)\n",
    "        x = torch.celu(self.fc3(x),alpha=3)\n",
    "        x = torch.celu(self.fc4(x),alpha=2)\n",
    "        x = torch.celu(self.fc5(x))\n",
    "        x = self.fc6(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nn_train_to_prob_mat(X_train, y_train, X_test, epoch_num = 20, class_labels=classes, verbose=False):\n",
    "    \n",
    "    y_train = y_train.replace(classes,range(0,len(class_labels)))\n",
    "    \n",
    "    # normalize data\n",
    "    std_scale = StandardScaler()\n",
    "    X_train = std_scale.fit_transform(X_train)\n",
    "    X_train = pd.DataFrame(X_train)\n",
    "    X_test = std_scale.transform(X_test)\n",
    "    X_test = pd.DataFrame(X_test)\n",
    "    \n",
    "    # make dataset\n",
    "    dataset = AudioDataset(X_train,y_train)\n",
    "    \n",
    "    # split into train and validation set for nn training\n",
    "    num_train = int(len(X_train)*.8)\n",
    "    num_val = len(X_train)-num_train\n",
    "    batch_size = 100\n",
    "    num_batches = num_train//batch_size\n",
    "    train, val = random_split(dataset, [num_train,num_val])\n",
    "    \n",
    "    # make dataloaders\n",
    "    train_dl = DataLoader(train, batch_size=batch_size, shuffle=True)\n",
    "    val_dl = DataLoader(val, batch_size=num_val, shuffle=False)\n",
    "    #test_dl = DataLoader(val, batch_size=1, shuffle=False)\n",
    "    \n",
    "    # make folder to save network params if does not exist\n",
    "    if not os.path.exists('./NN_CV_params'):\n",
    "        os.makedirs('./NN_CV_params')\n",
    "    \n",
    "    # train the network\n",
    "    if verbose:\n",
    "        print(\"--- BEGIN TRAINING NETWORK ---\")\n",
    "    net = Net()\n",
    "    nn_train(net, train_dl, val_dl, './NN_CV_params/network_params.pth',epoch_num=epoch_num,\n",
    "             num_batches=num_batches,verbose=verbose)\n",
    "    if verbose:\n",
    "        print(\"--- FINISHED TRAINING NETWORK ---\")\n",
    "    \n",
    "    # generate probability matrix for test data\n",
    "    prob_matrix = []\n",
    "    with torch.no_grad():\n",
    "        for index in range(len(X_test)):\n",
    "            data = torch.tensor(X_test.loc[index].values, dtype=torch.float)\n",
    "            net.load_state_dict(torch.load('./NN_CV_params/network_params.pth'))\n",
    "            outputs = torch.softmax(net(data).unsqueeze(1).T, dim=1)\n",
    "            prob_dist = outputs.tolist()[0]\n",
    "            prob_matrix.append(prob_dist)\n",
    "            \n",
    "    return np.array(prob_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- BEGIN TRAINING NETWORK ---\n",
      "[EPOCH # 1 ]\n",
      "       Loss: 2.055\n",
      "  Train Acc: 35.49 %\n",
      "    Val Acc: 34.23 %\n",
      "Max Val Acc: 34.23 %\n",
      "------------\n",
      "[EPOCH # 2 ]\n",
      "       Loss: 1.86\n",
      "  Train Acc: 40.18 %\n",
      "    Val Acc: 37.5 %\n",
      "Max Val Acc: 38.24 %\n",
      "------------\n",
      "[EPOCH # 3 ]\n",
      "       Loss: 1.627\n",
      "  Train Acc: 46.65 %\n",
      "    Val Acc: 41.67 %\n",
      "Max Val Acc: 41.67 %\n",
      "------------\n",
      "[EPOCH # 4 ]\n",
      "       Loss: 1.445\n",
      "  Train Acc: 50.89 %\n",
      "    Val Acc: 48.07 %\n",
      "Max Val Acc: 48.07 %\n",
      "------------\n",
      "[EPOCH # 5 ]\n",
      "       Loss: 1.32\n",
      "  Train Acc: 56.77 %\n",
      "    Val Acc: 49.7 %\n",
      "Max Val Acc: 50.3 %\n",
      "------------\n",
      "[EPOCH # 6 ]\n",
      "       Loss: 1.226\n",
      "  Train Acc: 59.93 %\n",
      "    Val Acc: 51.79 %\n",
      "Max Val Acc: 52.38 %\n",
      "------------\n",
      "[EPOCH # 7 ]\n",
      "       Loss: 1.137\n",
      "  Train Acc: 63.39 %\n",
      "    Val Acc: 51.34 %\n",
      "Max Val Acc: 52.38 %\n",
      "------------\n",
      "[EPOCH # 8 ]\n",
      "       Loss: 1.052\n",
      "  Train Acc: 67.67 %\n",
      "    Val Acc: 50.6 %\n",
      "Max Val Acc: 53.27 %\n",
      "------------\n",
      "[EPOCH # 9 ]\n",
      "       Loss: 0.985\n",
      "  Train Acc: 68.42 %\n",
      "    Val Acc: 52.08 %\n",
      "Max Val Acc: 54.32 %\n",
      "------------\n",
      "[EPOCH # 10 ]\n",
      "       Loss: 0.942\n",
      "  Train Acc: 70.68 %\n",
      "    Val Acc: 53.12 %\n",
      "Max Val Acc: 54.32 %\n",
      "------------\n",
      "[EPOCH # 11 ]\n",
      "       Loss: 0.883\n",
      "  Train Acc: 73.18 %\n",
      "    Val Acc: 51.49 %\n",
      "Max Val Acc: 54.32 %\n",
      "------------\n",
      "[EPOCH # 12 ]\n",
      "       Loss: 0.828\n",
      "  Train Acc: 75.26 %\n",
      "    Val Acc: 54.61 %\n",
      "Max Val Acc: 54.61 %\n",
      "------------\n",
      "[EPOCH # 13 ]\n",
      "       Loss: 0.774\n",
      "  Train Acc: 76.82 %\n",
      "    Val Acc: 54.17 %\n",
      "Max Val Acc: 54.61 %\n",
      "------------\n",
      "[EPOCH # 14 ]\n",
      "       Loss: 0.748\n",
      "  Train Acc: 78.79 %\n",
      "    Val Acc: 52.38 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "[EPOCH # 15 ]\n",
      "       Loss: 0.719\n",
      "  Train Acc: 79.39 %\n",
      "    Val Acc: 52.83 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "[EPOCH # 16 ]\n",
      "       Loss: 0.67\n",
      "  Train Acc: 80.32 %\n",
      "    Val Acc: 52.53 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "[EPOCH # 17 ]\n",
      "       Loss: 0.636\n",
      "  Train Acc: 80.54 %\n",
      "    Val Acc: 52.23 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "[EPOCH # 18 ]\n",
      "       Loss: 0.594\n",
      "  Train Acc: 83.85 %\n",
      "    Val Acc: 51.93 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "[EPOCH # 19 ]\n",
      "       Loss: 0.542\n",
      "  Train Acc: 86.16 %\n",
      "    Val Acc: 51.34 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "[EPOCH # 20 ]\n",
      "       Loss: 0.505\n",
      "  Train Acc: 88.36 %\n",
      "    Val Acc: 52.68 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "Finished Training\n",
      "Max Validation Acc: 55.05952380952381 %\n",
      "--- FINISHED TRAINING NETWORK ---\n",
      "--- BEGIN TRAINING NETWORK ---\n",
      "[EPOCH # 1 ]\n",
      "       Loss: 2.059\n",
      "  Train Acc: 29.95 %\n",
      "    Val Acc: 28.87 %\n",
      "Max Val Acc: 28.87 %\n",
      "------------\n",
      "[EPOCH # 2 ]\n",
      "       Loss: 1.878\n",
      "  Train Acc: 36.31 %\n",
      "    Val Acc: 34.52 %\n",
      "Max Val Acc: 34.52 %\n",
      "------------\n",
      "[EPOCH # 3 ]\n",
      "       Loss: 1.689\n",
      "  Train Acc: 42.67 %\n",
      "    Val Acc: 40.18 %\n",
      "Max Val Acc: 40.18 %\n",
      "------------\n",
      "[EPOCH # 4 ]\n",
      "       Loss: 1.512\n",
      "  Train Acc: 49.37 %\n",
      "    Val Acc: 45.24 %\n",
      "Max Val Acc: 45.24 %\n",
      "------------\n",
      "[EPOCH # 5 ]\n",
      "       Loss: 1.361\n",
      "  Train Acc: 55.32 %\n",
      "    Val Acc: 46.13 %\n",
      "Max Val Acc: 47.62 %\n",
      "------------\n",
      "[EPOCH # 6 ]\n",
      "       Loss: 1.258\n",
      "  Train Acc: 59.34 %\n",
      "    Val Acc: 49.11 %\n",
      "Max Val Acc: 49.4 %\n",
      "------------\n",
      "[EPOCH # 7 ]\n",
      "       Loss: 1.158\n",
      "  Train Acc: 63.91 %\n",
      "    Val Acc: 52.38 %\n",
      "Max Val Acc: 53.12 %\n",
      "------------\n",
      "[EPOCH # 8 ]\n",
      "       Loss: 1.074\n",
      "  Train Acc: 65.96 %\n",
      "    Val Acc: 53.72 %\n",
      "Max Val Acc: 53.72 %\n",
      "------------\n",
      "[EPOCH # 9 ]\n",
      "       Loss: 1.0\n",
      "  Train Acc: 68.38 %\n",
      "    Val Acc: 53.27 %\n",
      "Max Val Acc: 54.46 %\n",
      "------------\n",
      "[EPOCH # 10 ]\n",
      "       Loss: 0.928\n",
      "  Train Acc: 72.17 %\n",
      "    Val Acc: 54.91 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 11 ]\n",
      "       Loss: 0.873\n",
      "  Train Acc: 74.44 %\n",
      "    Val Acc: 53.42 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 12 ]\n",
      "       Loss: 0.848\n",
      "  Train Acc: 74.07 %\n",
      "    Val Acc: 54.91 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 13 ]\n",
      "       Loss: 0.782\n",
      "  Train Acc: 78.31 %\n",
      "    Val Acc: 53.42 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 14 ]\n",
      "       Loss: 0.742\n",
      "  Train Acc: 79.5 %\n",
      "    Val Acc: 52.98 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 15 ]\n",
      "       Loss: 0.696\n",
      "  Train Acc: 80.58 %\n",
      "    Val Acc: 52.23 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 16 ]\n",
      "       Loss: 0.639\n",
      "  Train Acc: 83.04 %\n",
      "    Val Acc: 52.53 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 17 ]\n",
      "       Loss: 0.612\n",
      "  Train Acc: 82.48 %\n",
      "    Val Acc: 49.4 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 18 ]\n",
      "       Loss: 0.564\n",
      "  Train Acc: 84.23 %\n",
      "    Val Acc: 52.83 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 19 ]\n",
      "       Loss: 0.542\n",
      "  Train Acc: 85.68 %\n",
      "    Val Acc: 50.89 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "[EPOCH # 20 ]\n",
      "       Loss: 0.495\n",
      "  Train Acc: 84.71 %\n",
      "    Val Acc: 50.3 %\n",
      "Max Val Acc: 55.8 %\n",
      "------------\n",
      "Finished Training\n",
      "Max Validation Acc: 55.80357142857143 %\n",
      "--- FINISHED TRAINING NETWORK ---\n",
      "--- BEGIN TRAINING NETWORK ---\n",
      "[EPOCH # 1 ]\n",
      "       Loss: 2.058\n",
      "  Train Acc: 30.88 %\n",
      "    Val Acc: 29.17 %\n",
      "Max Val Acc: 29.17 %\n",
      "------------\n",
      "[EPOCH # 2 ]\n",
      "       Loss: 1.884\n",
      "  Train Acc: 39.03 %\n",
      "    Val Acc: 35.42 %\n",
      "Max Val Acc: 35.86 %\n",
      "------------\n",
      "[EPOCH # 3 ]\n",
      "       Loss: 1.657\n",
      "  Train Acc: 44.49 %\n",
      "    Val Acc: 42.86 %\n",
      "Max Val Acc: 42.86 %\n",
      "------------\n",
      "[EPOCH # 4 ]\n",
      "       Loss: 1.468\n",
      "  Train Acc: 51.08 %\n",
      "    Val Acc: 47.92 %\n",
      "Max Val Acc: 47.92 %\n",
      "------------\n",
      "[EPOCH # 5 ]\n",
      "       Loss: 1.334\n",
      "  Train Acc: 56.44 %\n",
      "    Val Acc: 50.0 %\n",
      "Max Val Acc: 51.19 %\n",
      "------------\n",
      "[EPOCH # 6 ]\n",
      "       Loss: 1.224\n",
      "  Train Acc: 60.12 %\n",
      "    Val Acc: 51.93 %\n",
      "Max Val Acc: 51.93 %\n",
      "------------\n",
      "[EPOCH # 7 ]\n",
      "       Loss: 1.139\n",
      "  Train Acc: 62.65 %\n",
      "    Val Acc: 51.64 %\n",
      "Max Val Acc: 52.53 %\n",
      "------------\n",
      "[EPOCH # 8 ]\n",
      "       Loss: 1.063\n",
      "  Train Acc: 65.44 %\n",
      "    Val Acc: 50.3 %\n",
      "Max Val Acc: 52.83 %\n",
      "------------\n",
      "[EPOCH # 9 ]\n",
      "       Loss: 1.011\n",
      "  Train Acc: 69.87 %\n",
      "    Val Acc: 51.34 %\n",
      "Max Val Acc: 53.42 %\n",
      "------------\n",
      "[EPOCH # 10 ]\n",
      "       Loss: 0.948\n",
      "  Train Acc: 70.39 %\n",
      "    Val Acc: 50.74 %\n",
      "Max Val Acc: 53.42 %\n",
      "------------\n",
      "[EPOCH # 11 ]\n",
      "       Loss: 0.883\n",
      "  Train Acc: 72.54 %\n",
      "    Val Acc: 51.19 %\n",
      "Max Val Acc: 53.42 %\n",
      "------------\n",
      "[EPOCH # 12 ]\n",
      "       Loss: 0.835\n",
      "  Train Acc: 75.52 %\n",
      "    Val Acc: 51.19 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 13 ]\n",
      "       Loss: 0.783\n",
      "  Train Acc: 76.86 %\n",
      "    Val Acc: 52.23 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 14 ]\n",
      "       Loss: 0.747\n",
      "  Train Acc: 77.6 %\n",
      "    Val Acc: 53.57 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 15 ]\n",
      "       Loss: 0.702\n",
      "  Train Acc: 79.65 %\n",
      "    Val Acc: 52.53 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 16 ]\n",
      "       Loss: 0.66\n",
      "  Train Acc: 80.32 %\n",
      "    Val Acc: 51.04 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 17 ]\n",
      "       Loss: 0.638\n",
      "  Train Acc: 84.0 %\n",
      "    Val Acc: 52.08 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 18 ]\n",
      "       Loss: 0.584\n",
      "  Train Acc: 84.45 %\n",
      "    Val Acc: 49.4 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 19 ]\n",
      "       Loss: 0.557\n",
      "  Train Acc: 83.93 %\n",
      "    Val Acc: 49.26 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "[EPOCH # 20 ]\n",
      "       Loss: 0.489\n",
      "  Train Acc: 86.42 %\n",
      "    Val Acc: 52.38 %\n",
      "Max Val Acc: 54.91 %\n",
      "------------\n",
      "Finished Training\n",
      "Max Validation Acc: 54.910714285714285 %\n",
      "--- FINISHED TRAINING NETWORK ---\n",
      "--- BEGIN TRAINING NETWORK ---\n",
      "[EPOCH # 1 ]\n",
      "       Loss: 2.045\n",
      "  Train Acc: 32.81 %\n",
      "    Val Acc: 29.02 %\n",
      "Max Val Acc: 29.61 %\n",
      "------------\n",
      "[EPOCH # 2 ]\n",
      "       Loss: 1.836\n",
      "  Train Acc: 37.65 %\n",
      "    Val Acc: 36.9 %\n",
      "Max Val Acc: 37.35 %\n",
      "------------\n",
      "[EPOCH # 3 ]\n",
      "       Loss: 1.697\n",
      "  Train Acc: 41.0 %\n",
      "    Val Acc: 36.76 %\n",
      "Max Val Acc: 37.35 %\n",
      "------------\n",
      "[EPOCH # 4 ]\n",
      "       Loss: 1.533\n",
      "  Train Acc: 48.29 %\n",
      "    Val Acc: 45.09 %\n",
      "Max Val Acc: 45.09 %\n",
      "------------\n",
      "[EPOCH # 5 ]\n",
      "       Loss: 1.391\n",
      "  Train Acc: 52.19 %\n",
      "    Val Acc: 47.77 %\n",
      "Max Val Acc: 48.51 %\n",
      "------------\n",
      "[EPOCH # 6 ]\n",
      "       Loss: 1.278\n",
      "  Train Acc: 57.59 %\n",
      "    Val Acc: 52.38 %\n",
      "Max Val Acc: 52.38 %\n",
      "------------\n",
      "[EPOCH # 7 ]\n",
      "       Loss: 1.18\n",
      "  Train Acc: 61.76 %\n",
      "    Val Acc: 52.83 %\n",
      "Max Val Acc: 53.72 %\n",
      "------------\n",
      "[EPOCH # 8 ]\n",
      "       Loss: 1.104\n",
      "  Train Acc: 65.07 %\n",
      "    Val Acc: 54.91 %\n",
      "Max Val Acc: 55.36 %\n",
      "------------\n",
      "[EPOCH # 9 ]\n",
      "       Loss: 1.048\n",
      "  Train Acc: 68.01 %\n",
      "    Val Acc: 54.32 %\n",
      "Max Val Acc: 55.65 %\n",
      "------------\n",
      "[EPOCH # 10 ]\n",
      "       Loss: 0.966\n",
      "  Train Acc: 71.28 %\n",
      "    Val Acc: 55.21 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 11 ]\n",
      "       Loss: 0.903\n",
      "  Train Acc: 72.28 %\n",
      "    Val Acc: 53.72 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 12 ]\n",
      "       Loss: 0.844\n",
      "  Train Acc: 74.59 %\n",
      "    Val Acc: 52.83 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 13 ]\n",
      "       Loss: 0.815\n",
      "  Train Acc: 76.19 %\n",
      "    Val Acc: 53.57 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[EPOCH # 14 ]\n",
      "       Loss: 0.765\n",
      "  Train Acc: 77.49 %\n",
      "    Val Acc: 53.12 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 15 ]\n",
      "       Loss: 0.699\n",
      "  Train Acc: 80.21 %\n",
      "    Val Acc: 54.32 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 16 ]\n",
      "       Loss: 0.674\n",
      "  Train Acc: 80.69 %\n",
      "    Val Acc: 51.93 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 17 ]\n",
      "       Loss: 0.618\n",
      "  Train Acc: 82.89 %\n",
      "    Val Acc: 53.57 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 18 ]\n",
      "       Loss: 0.587\n",
      "  Train Acc: 84.0 %\n",
      "    Val Acc: 52.83 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 19 ]\n",
      "       Loss: 0.571\n",
      "  Train Acc: 85.19 %\n",
      "    Val Acc: 50.3 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "[EPOCH # 20 ]\n",
      "       Loss: 0.538\n",
      "  Train Acc: 86.57 %\n",
      "    Val Acc: 52.08 %\n",
      "Max Val Acc: 57.14 %\n",
      "------------\n",
      "Finished Training\n",
      "Max Validation Acc: 57.142857142857146 %\n",
      "--- FINISHED TRAINING NETWORK ---\n",
      "--- BEGIN TRAINING NETWORK ---\n",
      "[EPOCH # 1 ]\n",
      "       Loss: 2.051\n",
      "  Train Acc: 28.24 %\n",
      "    Val Acc: 28.27 %\n",
      "Max Val Acc: 28.27 %\n",
      "------------\n",
      "[EPOCH # 2 ]\n",
      "       Loss: 1.873\n",
      "  Train Acc: 36.38 %\n",
      "    Val Acc: 37.8 %\n",
      "Max Val Acc: 37.8 %\n",
      "------------\n",
      "[EPOCH # 3 ]\n",
      "       Loss: 1.678\n",
      "  Train Acc: 43.97 %\n",
      "    Val Acc: 43.6 %\n",
      "Max Val Acc: 43.6 %\n",
      "------------\n",
      "[EPOCH # 4 ]\n",
      "       Loss: 1.501\n",
      "  Train Acc: 49.96 %\n",
      "    Val Acc: 47.47 %\n",
      "Max Val Acc: 47.47 %\n",
      "------------\n",
      "[EPOCH # 5 ]\n",
      "       Loss: 1.371\n",
      "  Train Acc: 54.39 %\n",
      "    Val Acc: 51.64 %\n",
      "Max Val Acc: 51.93 %\n",
      "------------\n",
      "[EPOCH # 6 ]\n",
      "       Loss: 1.265\n",
      "  Train Acc: 59.26 %\n",
      "    Val Acc: 52.83 %\n",
      "Max Val Acc: 53.87 %\n",
      "------------\n",
      "[EPOCH # 7 ]\n",
      "       Loss: 1.18\n",
      "  Train Acc: 62.95 %\n",
      "    Val Acc: 54.76 %\n",
      "Max Val Acc: 55.06 %\n",
      "------------\n",
      "[EPOCH # 8 ]\n",
      "       Loss: 1.099\n",
      "  Train Acc: 65.33 %\n",
      "    Val Acc: 54.32 %\n",
      "Max Val Acc: 55.36 %\n",
      "------------\n",
      "[EPOCH # 9 ]\n",
      "       Loss: 1.026\n",
      "  Train Acc: 68.15 %\n",
      "    Val Acc: 55.65 %\n",
      "Max Val Acc: 56.7 %\n",
      "------------\n",
      "[EPOCH # 10 ]\n",
      "       Loss: 0.975\n",
      "  Train Acc: 70.42 %\n",
      "    Val Acc: 56.7 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 11 ]\n",
      "       Loss: 0.923\n",
      "  Train Acc: 73.62 %\n",
      "    Val Acc: 57.74 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 12 ]\n",
      "       Loss: 0.853\n",
      "  Train Acc: 75.15 %\n",
      "    Val Acc: 57.89 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 13 ]\n",
      "       Loss: 0.796\n",
      "  Train Acc: 74.74 %\n",
      "    Val Acc: 59.08 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 14 ]\n",
      "       Loss: 0.778\n",
      "  Train Acc: 77.86 %\n",
      "    Val Acc: 56.99 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 15 ]\n",
      "       Loss: 0.721\n",
      "  Train Acc: 79.84 %\n",
      "    Val Acc: 57.14 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 16 ]\n",
      "       Loss: 0.677\n",
      "  Train Acc: 82.29 %\n",
      "    Val Acc: 55.65 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 17 ]\n",
      "       Loss: 0.607\n",
      "  Train Acc: 82.51 %\n",
      "    Val Acc: 53.87 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 18 ]\n",
      "       Loss: 0.572\n",
      "  Train Acc: 84.82 %\n",
      "    Val Acc: 54.46 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 19 ]\n",
      "       Loss: 0.549\n",
      "  Train Acc: 85.04 %\n",
      "    Val Acc: 54.32 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "[EPOCH # 20 ]\n",
      "       Loss: 0.542\n",
      "  Train Acc: 87.98 %\n",
      "    Val Acc: 57.29 %\n",
      "Max Val Acc: 59.23 %\n",
      "------------\n",
      "Finished Training\n",
      "Max Validation Acc: 59.226190476190474 %\n",
      "--- FINISHED TRAINING NETWORK ---\n",
      "--- BEGIN TRAINING NETWORK ---\n",
      "[EPOCH # 1 ]\n",
      "       Loss: 2.057\n",
      "  Train Acc: 33.18 %\n",
      "    Val Acc: 32.89 %\n",
      "Max Val Acc: 33.18 %\n",
      "------------\n",
      "[EPOCH # 2 ]\n",
      "       Loss: 1.89\n",
      "  Train Acc: 36.27 %\n",
      "    Val Acc: 35.57 %\n",
      "Max Val Acc: 35.57 %\n",
      "------------\n",
      "[EPOCH # 3 ]\n",
      "       Loss: 1.691\n",
      "  Train Acc: 43.45 %\n",
      "    Val Acc: 38.39 %\n",
      "Max Val Acc: 38.39 %\n",
      "------------\n",
      "[EPOCH # 4 ]\n",
      "       Loss: 1.51\n",
      "  Train Acc: 49.59 %\n",
      "    Val Acc: 46.88 %\n",
      "Max Val Acc: 46.88 %\n",
      "------------\n",
      "[EPOCH # 5 ]\n",
      "       Loss: 1.372\n",
      "  Train Acc: 54.43 %\n",
      "    Val Acc: 50.15 %\n",
      "Max Val Acc: 50.6 %\n",
      "------------\n",
      "[EPOCH # 6 ]\n",
      "       Loss: 1.277\n",
      "  Train Acc: 58.37 %\n",
      "    Val Acc: 50.6 %\n",
      "Max Val Acc: 51.64 %\n",
      "------------\n",
      "[EPOCH # 7 ]\n",
      "       Loss: 1.183\n",
      "  Train Acc: 61.27 %\n",
      "    Val Acc: 52.23 %\n",
      "Max Val Acc: 52.98 %\n",
      "------------\n",
      "[EPOCH # 8 ]\n",
      "       Loss: 1.112\n",
      "  Train Acc: 65.36 %\n",
      "    Val Acc: 54.32 %\n",
      "Max Val Acc: 54.61 %\n",
      "------------\n",
      "[EPOCH # 9 ]\n",
      "       Loss: 1.026\n",
      "  Train Acc: 68.23 %\n",
      "    Val Acc: 54.17 %\n",
      "Max Val Acc: 55.21 %\n",
      "------------\n",
      "[EPOCH # 10 ]\n",
      "       Loss: 0.984\n",
      "  Train Acc: 69.31 %\n",
      "    Val Acc: 53.27 %\n",
      "Max Val Acc: 55.21 %\n",
      "------------\n",
      "[EPOCH # 11 ]\n",
      "       Loss: 0.929\n",
      "  Train Acc: 70.46 %\n",
      "    Val Acc: 53.12 %\n",
      "Max Val Acc: 55.21 %\n",
      "------------\n",
      "[EPOCH # 12 ]\n",
      "       Loss: 0.874\n",
      "  Train Acc: 72.51 %\n",
      "    Val Acc: 54.61 %\n",
      "Max Val Acc: 55.65 %\n",
      "------------\n",
      "[EPOCH # 13 ]\n",
      "       Loss: 0.817\n",
      "  Train Acc: 75.97 %\n",
      "    Val Acc: 52.83 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "[EPOCH # 14 ]\n",
      "       Loss: 0.777\n",
      "  Train Acc: 74.18 %\n",
      "    Val Acc: 50.45 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "[EPOCH # 15 ]\n",
      "       Loss: 0.767\n",
      "  Train Acc: 78.27 %\n",
      "    Val Acc: 51.64 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "[EPOCH # 16 ]\n",
      "       Loss: 0.695\n",
      "  Train Acc: 80.62 %\n",
      "    Val Acc: 52.98 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "[EPOCH # 17 ]\n",
      "       Loss: 0.642\n",
      "  Train Acc: 79.65 %\n",
      "    Val Acc: 52.98 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "[EPOCH # 18 ]\n",
      "       Loss: 0.601\n",
      "  Train Acc: 84.52 %\n",
      "    Val Acc: 52.08 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "[EPOCH # 19 ]\n",
      "       Loss: 0.552\n",
      "  Train Acc: 83.97 %\n",
      "    Val Acc: 54.17 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "[EPOCH # 20 ]\n",
      "       Loss: 0.52\n",
      "  Train Acc: 86.31 %\n",
      "    Val Acc: 53.87 %\n",
      "Max Val Acc: 55.95 %\n",
      "------------\n",
      "Finished Training\n",
      "Max Validation Acc: 55.95238095238095 %\n",
      "--- FINISHED TRAINING NETWORK ---\n"
     ]
    }
   ],
   "source": [
    "y_pred_NN = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    \n",
    "    inputs_train_d = inputs_train.drop(inputs_train.index[i-840:i])\n",
    "    targets_train_d = targets_train.drop(targets_train.index[i-840:i])\n",
    "    inputs_train_td = inputs_train[i-840:i]\n",
    "    \n",
    "    inputs_train_nn = inputs_train_d.reset_index(drop=True)\n",
    "    inputs_test_nn = inputs_train_td.reset_index(drop=True)\n",
    "    targets_train_nn=targets_train_d.reset_index(drop=True)\n",
    "\n",
    "    \n",
    "    NN_prob = nn_train_to_prob_mat(inputs_train_nn,\n",
    "                                    targets_train_nn, \n",
    "                                    inputs_test_nn, class_labels=classes, epoch_num=20, verbose=True)\n",
    "    y_pred_NN = np.append(y_pred_NN, NN_prob, axis = 0)\n",
    "\n",
    "dfNN_train = pd.DataFrame(y_pred_NN, columns = ['NN_El', 'NN_Exp', 'NN_Flk', 'NN_HH', \n",
    "                                           'NN_Inst', 'NN_Intr', 'NN_Pop', 'NN_Rck'])\n",
    "\n",
    "inputs_train_nnf = inputs_train.reset_index(drop=True)\n",
    "targets_train_nnf = targets_train.reset_index(drop=True)\n",
    "inputs_test_nnf = inputs_test.reset_index(drop=True)\n",
    "\n",
    "\n",
    "y_pred_test_NN = nn_train_to_prob_mat(inputs_train_nnf,\n",
    "                                    targets_train_nnf, inputs_test_nnf, class_labels=classes, epoch_num=20, verbose=True)\n",
    "\n",
    "dfNN_test = pd.DataFrame(y_pred_test_NN, columns = ['NN_El', 'NN_Exp', 'NN_Flk', 'NN_HH', \n",
    "                                           'NN_Inst', 'NN_Intr', 'NN_Pop', 'NN_Rck'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/xgboost/sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13:52:43] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:52:44] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:53:30] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:53:30] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:54:17] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:54:17] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:55:04] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:55:04] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:55:52] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:55:52] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:56:40] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:56:40] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n"
     ]
    }
   ],
   "source": [
    "#XGBoost1\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "y_pred_XGB = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    XGB = XGBClassifier(\n",
    "     learning_rate =0.1,\n",
    "     n_estimators=320,\n",
    "     max_depth=7,\n",
    "     min_child_weight=5,\n",
    "     gamma=0,\n",
    "     subsample=0.6,\n",
    "     colsample_bytree=0.5,\n",
    "     reg_alpha = 0.1,\n",
    "     reg_lambda = 1,\n",
    "     objective= 'multi:softmax',\n",
    "     num_class = 8,\n",
    "     n_jobs=-1,\n",
    "     scale_pos_weight=1,\n",
    "     seed=27)\n",
    "    XGB_prob = XGB.fit(inputs_train.drop(inputs_train.index[i-840:i]), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train[i-840:i])\n",
    "    y_pred_XGB = np.append(y_pred_XGB, XGB_prob, axis = 0)\n",
    "    \n",
    "\n",
    "dfXGB_train = pd.DataFrame(y_pred_XGB, columns = ['XGB1_El', 'XGB1_Exp', 'XGB1_Flk', 'XGB1_HH', \n",
    "                                           'XGB1_Inst', 'XGB1_Intr', 'XGB1_Pop', 'XGB1_Rck'])\n",
    "\n",
    "XGB_fitted = XGB.fit(inputs_train, targets_train)\n",
    "\n",
    "y_pred_test_XGB = XGB_fitted.predict_proba(inputs_test)\n",
    "dfXGB_test = pd.DataFrame(y_pred_test_XGB, columns = ['XGB1_El', 'XGB1_Exp', 'XGB1_Flk', 'XGB1_HH', \n",
    "                                           'XGB1_Inst', 'XGB1_Intr', 'XGB1_Pop', 'XGB1_Rck'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13:57:48] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:57:48] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:58:29] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:58:29] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:59:11] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:59:11] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[13:59:52] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[13:59:52] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[14:00:33] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:00:33] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[14:01:14] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:01:14] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n"
     ]
    }
   ],
   "source": [
    "#XGBoost2\n",
    "\n",
    "y_pred_XGB2 = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    XGB2 = XGBClassifier(\n",
    "     learning_rate =0.1,\n",
    "        n_estimators=320,\n",
    "        max_depth=7,\n",
    "        min_child_weight=5,\n",
    "        gamma=0.2,\n",
    "        subsample=0.6,\n",
    "        colsample_bytree=0.4,\n",
    "        reg_alpha = 0.1,\n",
    "        reg_lambda = 1,\n",
    "        objective= 'multi:softmax',\n",
    "        num_class = 8,\n",
    "        n_jobs=-1,\n",
    "        scale_pos_weight=1,\n",
    "        seed=27)\n",
    "    XGB2_prob = XGB2.fit(inputs_train.drop(inputs_train.index[i-840:i]), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train[i-840:i])\n",
    "    y_pred_XGB2 = np.append(y_pred_XGB2, XGB2_prob, axis = 0)\n",
    "    \n",
    "dfXGB2_train = pd.DataFrame(y_pred_XGB2, columns = ['XGB2_El', 'XGB2_Exp', 'XGB2_Flk', 'XGB2_HH', \n",
    "                                           'XGB2_Inst', 'XGB2_Intr', 'XGB2_Pop', 'XGB2_Rck'])\n",
    "\n",
    "XGB2_fitted = XGB2.fit(inputs_train, targets_train)\n",
    "\n",
    "y_pred_test_XGB2 = XGB2_fitted.predict_proba(inputs_test)\n",
    "dfXGB2_test = pd.DataFrame(y_pred_test_XGB2, columns = ['XGB2_El', 'XGB2_Exp', 'XGB2_Flk', 'XGB2_HH', \n",
    "                                           'XGB2_Inst', 'XGB2_Intr', 'XGB2_Pop', 'XGB2_Rck'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[14:02:09] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:02:09] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[14:02:44] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:02:44] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[14:03:18] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:03:18] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[14:03:55] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:03:55] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[14:04:30] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:04:31] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "[14:05:04] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[14:05:05] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n"
     ]
    }
   ],
   "source": [
    "#XGBoost3\n",
    "\n",
    "y_pred_XGB3 = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    XGB3 = XGBClassifier(\n",
    "     learning_rate =0.1,\n",
    "      n_estimators=320,\n",
    "      max_depth=3,\n",
    "      min_child_weight=5,\n",
    "      gamma=0,\n",
    "      subsample=0.6,\n",
    "      colsample_bytree=0.5,\n",
    "      reg_alpha = 1,\n",
    "      reg_lambda = 1,\n",
    "      objective= 'multi:softmax',\n",
    "      num_class = 8,\n",
    "      n_jobs=-1,\n",
    "      scale_pos_weight=1,\n",
    "      seed=27)\n",
    "\n",
    "    XGB3_prob = XGB3.fit(inputs_train.drop(inputs_train.index[i-840:i]), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train[i-840:i])\n",
    "    \n",
    "    y_pred_XGB3 = np.append(y_pred_XGB3, XGB3_prob, axis = 0)\n",
    "\n",
    "dfXGB3_train = pd.DataFrame(y_pred_XGB3, columns = ['XGB3_El', 'XGB3_Exp', 'XGB3_Flk', 'XGB3_HH', \n",
    "                                           'XGB3_Inst', 'XGB3_Intr', 'XGB3_Pop', 'XGB3_Rck'])\n",
    "\n",
    "XGB3_fitted = XGB3.fit(inputs_train, targets_train)\n",
    "\n",
    "y_pred_test_XGB3 = XGB3_fitted.predict_proba(inputs_test)\n",
    "dfXGB3_test = pd.DataFrame(y_pred_test_XGB3, columns = ['XGB3_El', 'XGB3_Exp', 'XGB3_Flk', 'XGB3_HH', \n",
    "                                           'XGB3_Inst', 'XGB3_Intr', 'XGB3_Pop', 'XGB3_Rck'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Discriminant Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#LDA\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "\n",
    "y_pred_LDA = np.empty(shape = (0,8))\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    LDA = LinearDiscriminantAnalysis(solver = \"eigen\", shrinkage = 'auto')\n",
    "\n",
    "    LDA_prob = LDA.fit(inputs_train.drop(inputs_train.index[i-840:i]), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train[i-840:i])\n",
    "    \n",
    "    y_pred_LDA = np.append(y_pred_LDA, LDA_prob, axis = 0)\n",
    "    \n",
    "dfLDA_train = pd.DataFrame(y_pred_LDA, columns = ['LDA_El', 'LDA_Exp', 'LDA_Flk', 'LDA_HH', \n",
    "                                           'LDA_Inst', 'LDA_Intr', 'LDA_Pop', 'LDA_Rck'])\n",
    "\n",
    "LDA_fitted = LDA.fit(inputs_train, targets_train)\n",
    "\n",
    "y_pred_test_LDA = LDA_fitted.predict_proba(inputs_test)\n",
    "dfLDA_test = pd.DataFrame(y_pred_test_LDA, columns = ['LDA_El', 'LDA_Exp', 'LDA_Flk', 'LDA_HH', \n",
    "                                           'LDA_Inst', 'LDA_Intr', 'LDA_Pop', 'LDA_Rck'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quadratic Discriminant Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#QDA\n",
    "\n",
    "#PCA data preparation\n",
    "\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)\n",
    "inputs_train_sc = scaler.transform(inputs_train)\n",
    "inputs_test_sc = scaler.transform(inputs_test)\n",
    "X_train_sc = scaler.transform(X_train)\n",
    "\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca = PCA(n_components = 200)\n",
    "pca.fit(X_train_sc)\n",
    "inputs_train_pca = pca.transform(inputs_train_sc)\n",
    "inputs_test_pca = pca.transform(inputs_test_sc)\n",
    "\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "\n",
    "y_pred_QDA = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    QDA = QuadraticDiscriminantAnalysis()\n",
    "    QDA_prob = QDA.fit(np.delete(inputs_train_pca, slice(i-840, i), axis = 0), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train_pca[i-840:i])\n",
    "\n",
    "    y_pred_QDA = np.append(y_pred_QDA, QDA_prob, axis = 0)\n",
    "    \n",
    "dfQDA_train = pd.DataFrame(y_pred_QDA, columns = ['QDA_El', 'QDA_Exp', 'QDA_Flk', 'QDA_HH', \n",
    "                                           'QDA_Inst', 'QDA_Intr', 'QDA_Pop', 'QDA_Rck'])\n",
    "\n",
    "QDA_fitted = QDA.fit(inputs_train_pca, targets_train)\n",
    "\n",
    "y_pred_test_QDA = QDA_fitted.predict_proba(inputs_test_pca)\n",
    "dfQDA_test = pd.DataFrame(y_pred_test_QDA, columns = ['QDA_El', 'QDA_Exp', 'QDA_Flk', 'QDA_HH', \n",
    "                                           'QDA_Inst', 'QDA_Intr', 'QDA_Pop', 'QDA_Rck'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## K-nearest neighbours "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#KNN\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "y_pred_KNN = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "\n",
    "    KNN = KNeighborsClassifier(n_neighbors=20)\n",
    "\n",
    "    KNN_prob = KNN.fit(np.delete(inputs_train_sc, slice(i-840, i), axis = 0), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train_sc[i-840:i])\n",
    "    \n",
    "    y_pred_KNN = np.append(y_pred_KNN, KNN_prob, axis = 0)\n",
    "    \n",
    "dfKNN_train = pd.DataFrame(y_pred_KNN, columns = ['KNN_El', 'KNN_Exp', 'KNN_Flk', 'KNN_HH', \n",
    "                                           'KNN_Inst', 'KNN_Intr', 'KNN_Pop', 'KNN_Rck'])\n",
    "\n",
    "KNN_fitted = KNN.fit(inputs_train_sc, targets_train)\n",
    "\n",
    "y_pred_test_KNN = KNN_fitted.predict_proba(inputs_test_sc)\n",
    "dfKNN_test = pd.DataFrame(y_pred_test_KNN, columns = ['KNN_El', 'KNN_Exp', 'KNN_Flk', 'KNN_HH', \n",
    "                                           'KNN_Inst', 'KNN_Intr', 'KNN_Pop', 'KNN_Rck'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "y_pred_LR = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    LR = LogisticRegression(max_iter = 50)\n",
    "    \n",
    "    LR_prob = LR.fit(inputs_train.drop(inputs_train.index[i-840:i]), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train[i-840:i])\n",
    "    \n",
    "    y_pred_LR = np.append(y_pred_LR, LR_prob, axis = 0)\n",
    "    \n",
    "dfLR_train = pd.DataFrame(y_pred_LR, columns = ['LR_El', 'LR_Exp', 'LR_Flk', 'LR_HH', \n",
    "                                           'LR_Inst', 'LR_Intr', 'LR_Pop', 'LR_Rck'])\n",
    "\n",
    "LR_fitted = LR.fit(inputs_train, targets_train)\n",
    "\n",
    "y_pred_test_LR = LR_fitted.predict_proba(inputs_test)\n",
    "dfLR_test = pd.DataFrame(y_pred_test_LR, columns = ['LR_El', 'LR_Exp', 'LR_Flk', 'LR_HH', \n",
    "                                           'LR_Inst', 'LR_Intr', 'LR_Pop', 'LR_Rck'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Naive Bayes\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "y_pred_NB = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "    NB = GaussianNB()\n",
    "    \n",
    "    NB_prob = NB.fit(inputs_train.drop(inputs_train.index[i-840:i]), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train[i-840:i])\n",
    "    \n",
    "    y_pred_NB = np.append(y_pred_NB, NB_prob, axis = 0)\n",
    "    \n",
    "    \n",
    "dfNB_train = pd.DataFrame(y_pred_NB, columns = ['NB_El', 'NB_Exp', 'NB_Flk', 'NB_HH', \n",
    "                                           'NB_Inst', 'NB_Intr', 'NB_Pop', 'NB_Rck'])\n",
    "\n",
    "NB_fitted = NB.fit(inputs_train, targets_train)\n",
    "\n",
    "y_pred_test_NB = NB_fitted.predict_proba(inputs_test)\n",
    "\n",
    "dfNB_test = pd.DataFrame(y_pred_test_NB, columns = ['NB_El', 'NB_Exp', 'NB_Flk', 'NB_HH', \n",
    "                                           'NB_Inst', 'NB_Intr', 'NB_Pop', 'NB_Rck'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extra Trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:368: UserWarning: Warm-start fitting without increasing n_estimators does not fit new trees.\n",
      "  warn(\"Warm-start fitting without increasing n_estimators does not \"\n"
     ]
    }
   ],
   "source": [
    "#Extratrees \n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "\n",
    "indices = pd.read_csv('Downloads/RF_indices.csv', index_col = 0, squeeze=True).to_numpy()\n",
    "i = 190\n",
    "ind = indices[0:i :]\n",
    "inputs_train_rf = inputs_train_sc[:,ind]\n",
    "inputs_test_rf = inputs_test_sc[:,ind]\n",
    "\n",
    "\n",
    "y_pred_XTR = np.empty(shape = (0,8))\n",
    "\n",
    "for i in [840, 1680, 2520, 3360, 4200]:\n",
    "\n",
    "    XTR = ExtraTreesClassifier(warm_start = True, n_estimators = 840, max_features = None, min_samples_split = 2, \n",
    "                          random_state = 102)\n",
    "    \n",
    "    XTR_prob = XTR.fit(np.delete(inputs_train_rf, slice(i-840, i), axis = 0), \n",
    "                       targets_train.drop(targets_train.index[i-840:i])).predict_proba(inputs_train_rf[i-840:i])\n",
    "    \n",
    "    y_pred_XTR = np.append(y_pred_XTR, XTR_prob, axis = 0)\n",
    "\n",
    "dfXTR_train = pd.DataFrame(y_pred_XTR, columns = ['XTR_El', 'XTR_Exp', 'XTR_Flk', 'XTR_HH', \n",
    "                                           'XTR_Inst', 'XTR_Intr', 'XTR_Pop', 'XTR_Rck'])\n",
    "\n",
    "XTR_fitted = XTR.fit(inputs_train_rf, targets_train)\n",
    "\n",
    "y_pred_test_XTR = XTR_fitted.predict_proba(inputs_test_rf)\n",
    "\n",
    "dfXTR_test = pd.DataFrame(y_pred_test_XTR, columns = ['XTR_El', 'XTR_Exp', 'XTR_Flk', 'XTR_HH', \n",
    "                                           'XTR_Inst', 'XTR_Intr', 'XTR_Pop', 'XTR_Rck'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Probability matrix combination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_proba_train_t = pd.concat([dfXGB_train, dfLDA_train, dfQDA_train, \n",
    "                              dfKNN_train, dfLR_train, dfXGB2_train, dfXGB3_train,  dfNB_train, dfXTR_train, dfNN_train],\n",
    "                               axis = 1 )\n",
    "pred_proba_test_t = pd.concat([dfXGB_test, dfLDA_test, dfQDA_test,\n",
    "                            dfKNN_test, dfLR_test, dfXGB2_test, dfXGB3_test, dfNB_test, dfXTR_test, dfNN_test], axis = 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Top-level classifiers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction accuracy IS:  0.6302380952380953\n",
      "Prediction accuracy OS:  0.6394444444444445\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "log_reg = LogisticRegression(max_iter = 150)\n",
    "log_reg.fit(pred_proba_train_t, targets_train)\n",
    "print('Prediction accuracy IS: ', log_reg.score(pred_proba_train_t, targets_train))\n",
    "print('Prediction accuracy OS: ', log_reg.score(pred_proba_test_t, targets_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Discriminant Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction accuracy IS:  0.6204761904761905\n",
      "Prediction accuracy OS:  0.6333333333333333\n"
     ]
    }
   ],
   "source": [
    "LDA_reg = LinearDiscriminantAnalysis(solver = \"eigen\", shrinkage = 'auto')\n",
    "LDA_reg.fit(pred_proba_train_t, targets_train)\n",
    "print('Prediction accuracy IS: ', LDA_reg.score(pred_proba_train_t, targets_train))\n",
    "print('Prediction accuracy OS: ', LDA_reg.score(pred_proba_test_t, targets_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/xgboost/sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20:33:44] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[20:33:44] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "Prediction accuracy IS:  0.9997619047619047\n",
      "Prediction accuracy OS:  0.63\n"
     ]
    }
   ],
   "source": [
    "XGB_reg = XGBClassifier(\n",
    " learning_rate =0.1,\n",
    " n_estimators=320,\n",
    " max_depth=7,\n",
    " min_child_weight=5,\n",
    " gamma=0,\n",
    " subsample=0.6,\n",
    " colsample_bytree=0.5,\n",
    " reg_alpha = 0.1,\n",
    " reg_lambda = 1,\n",
    " objective= 'multi:softmax',\n",
    " num_class = 8,\n",
    " n_jobs=-1,\n",
    " scale_pos_weight=1,\n",
    " seed=27)\n",
    "\n",
    "XGB_reg.fit(pred_proba_train_t, targets_train)\n",
    "print('Prediction accuracy IS: ', XGB_reg.score(pred_proba_train_t, targets_train))\n",
    "print('Prediction accuracy OS: ', XGB_reg.score(pred_proba_test_t, targets_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction accuracy IS:  0.5919047619047619\n",
      "Prediction accuracy OS:  0.6016666666666667\n"
     ]
    }
   ],
   "source": [
    "NB_reg = GaussianNB()\n",
    "NB_reg.fit(pred_proba_train_t, targets_train)\n",
    "print('Prediction accuracy IS: ', NB_reg.score(pred_proba_train_t, targets_train))\n",
    "print('Prediction accuracy OS: ', NB_reg.score(pred_proba_test_t, targets_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction accuracy IS:  0.7861904761904762\n",
      "Prediction accuracy OS:  0.63\n"
     ]
    }
   ],
   "source": [
    "RF_reg = RandomForestClassifier(n_estimators = 50, max_depth = 10, class_weight = 'balanced')\n",
    "RF_reg.fit(pred_proba_train_t, targets_train)\n",
    "print('Prediction accuracy IS: ', RF_reg.score(pred_proba_train_t, targets_train))\n",
    "print('Prediction accuracy OS: ', RF_reg.score(pred_proba_test_t, targets_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20:33:58] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[20:33:58] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/xgboost/sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction accuracy IS:  0.9997619047619047\n",
      "Prediction accuracy OS:  0.6233333333333333\n"
     ]
    }
   ],
   "source": [
    "XGB2_reg = XGBClassifier(\n",
    " learning_rate =0.1,\n",
    "    n_estimators=320,\n",
    "    max_depth=7,\n",
    "    min_child_weight=5,\n",
    "    gamma=0.2,\n",
    "    subsample=0.6,\n",
    "    colsample_bytree=0.4,\n",
    "    reg_alpha = 0.1,\n",
    "    reg_lambda = 1,\n",
    "    objective= 'multi:softmax',\n",
    "    num_class = 8,\n",
    "    n_jobs=-1,\n",
    "    scale_pos_weight=1,\n",
    "    seed=27)\n",
    "XGB2_reg.fit(pred_proba_train_t, targets_train)\n",
    "print('Prediction accuracy IS: ', XGB2_reg.score(pred_proba_train_t, targets_train))\n",
    "print('Prediction accuracy OS: ', XGB2_reg.score(pred_proba_test_t, targets_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20:34:08] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:541: \n",
      "Parameters: { scale_pos_weight } might not be used.\n",
      "\n",
      "  This may not be accurate due to some parameters are only used in language bindings but\n",
      "  passed down to XGBoost core.  Or some parameters are not used but slip through this\n",
      "  verification. Please open an issue if you find above cases.\n",
      "\n",
      "\n",
      "[20:34:08] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "Prediction accuracy IS:  0.9252380952380952\n",
      "Prediction accuracy OS:  0.6327777777777778\n"
     ]
    }
   ],
   "source": [
    "XGB3_reg = XGBClassifier(\n",
    " learning_rate =0.1,\n",
    "  n_estimators=320,\n",
    "  max_depth=3,\n",
    "  min_child_weight=5,\n",
    "  gamma=0,\n",
    "  subsample=0.6,\n",
    "  colsample_bytree=0.5,\n",
    "  reg_alpha = 1,\n",
    "  reg_lambda = 1,\n",
    "  objective= 'multi:softmax',\n",
    "  num_class = 8,\n",
    "  n_jobs=-1,\n",
    "  scale_pos_weight=1,\n",
    "  seed=27)\n",
    "XGB3_reg.fit(pred_proba_train_t, targets_train)\n",
    "print('Prediction accuracy IS: ', XGB3_reg.score(pred_proba_train_t, targets_train))\n",
    "print('Prediction accuracy OS: ', XGB3_reg.score(pred_proba_test_t, targets_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 3000x3000 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "plt.figure(figsize=(30, 30), dpi = 100)\n",
    "plot_confusion_matrix(estimator = XGB_reg, X = pred_proba_test_t, y_true = targets_test, xticks_rotation = 'vertical')\n",
    "plt.savefig('Documents/SML_prac_fig/confusion_mat_STC')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_proba_train_t.to_csv(r'Documents/debug.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
